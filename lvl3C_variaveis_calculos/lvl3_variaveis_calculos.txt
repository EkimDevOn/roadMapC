

                                                                Variáveis em C



Uma variável em C é um local de armazenamento na memória que tem um nome e um tipo específico. O tipo determina o tipo de dados que a variável pode armazenar,
 como números inteiros, números de ponto flutuante, caracteres, etc.
Declaração de Variáveis
Para usar uma variável em C, você precisa declará-la, especificando seu tipo e nome. Aqui estão alguns exemplos:

int idade;       // Declara uma variável inteira chamada 'idade'
float altura;    // Declara uma variável de ponto flutuante chamada 'altura'
char letra;      // Declara uma variável caractere chamada 'letra'
double peso;     // Declara uma variável de ponto flutuante de precisão dupla chamada 'peso'

Atribuição de Dados
A atribuição de dados em C é feita usando o operador =. O operador = é usado para atribuir um valor a uma variável. A sintaxe é a seguinte:

variavel = valor;
variavel: O nome da variável que receberá o valor.
valor: O valor a ser atribuído à variável.

Exemplos de Atribuição

idade = 25;      // Atribui o valor 25 à variável 'idade'
altura = 1.75;   // Atribui o valor 1.75 à variável 'altura'
letra = 'A';     // Atribui o caractere 'A' à variável 'letra'
peso = 70.5;     // Atribui o valor 70.5 à variável 'peso'

Declaração e Inicialização Simultânea
Você também pode declarar e inicializar uma variável em uma única linha:

int idade = 25;       // Declara e inicializa 'idade' com 25
float altura = 1.75;  // Declara e inicializa 'altura' com 1.75
char letra = 'A';     // Declara e inicializa 'letra' com 'A'
double peso = 70.5;   // Declara e inicializa 'peso' com 70.5

Operador de Atribuição =
O operador = é usado para atribuir um valor a uma variável. É importante notar que o operador = não é um operador de igualdade (para isso, você usa ==).

Exemplo de Uso do Operador de Atribuição

#include <stdio.h>

int main() {
    int a, b, c;

    a = 10;  // Atribui o valor 10 à variável 'a'
    b = 20;  // Atribui o valor 20 à variável 'b'
    c = a + b;  // Atribui a soma de 'a' e 'b' à variável 'c'

    printf("a = %d\n", a);
    printf("b = %d\n", b);
    printf("c = %d\n", c);

    return 0;
}
Saída:

a = 10
b = 20
c = 30


Atribuição Composta

C também suporta atribuição composta, que combina uma operação aritmética com a atribuição. Aqui estão alguns exemplos:

+=: Adiciona um valor à variável e atribui o resultado à variável.
-=: Subtrai um valor da variável e atribui o resultado à variável.
*=: Multiplica a variável por um valor e atribui o resultado à variável.
/=: Divide a variável por um valor e atribui o resultado à variável.
%=: Calcula o módulo da variável por um valor e atribui o resultado à variável.

Exemplo de Atribuição Composta

#include <stdio.h>

int main() {
    int x = 10;

    x += 5;  // Equivalente a x = x + 5
    printf("x = %d\n", x);  // Imprime 15

    x -= 3;  // Equivalente a x = x - 3
    printf("x = %d\n", x);  // Imprime 12

    x *= 2;  // Equivalente a x = x * 2
    printf("x = %d\n", x);  // Imprime 24

    x /= 4;  // Equivalente a x = x / 4
    printf("x = %d\n", x);  // Imprime 6

    x %= 5;  // Equivalente a x = x % 5
    printf("x = %d\n", x);  // Imprime 1

    return 0;
}

Saída:

x = 15
x = 12
x = 24
x = 6
x = 1

Conclusão
As variáveis em C são locais de armazenamento que podem armazenar valores de tipos específicos.
 A atribuição de dados é feita usando o operador =, que atribui um valor a uma variável.
  Você também pode usar operadores de atribuição composta para realizar operações aritméticas e atribuição em uma única linha.



xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


                                               Aprenda a realizar cálculos em C



Realizar cálculos em C é uma tarefa comum e fundamental. Você pode usar operadores aritméticos para realizar operações básicas como adição,
 subtração, multiplicação, divisão e módulo. Vamos ver como fazer isso passo a passo.
Operadores Aritméticos em C

C possui vários operadores aritméticos que permitem realizar cálculos básicos:

+: Adição
-: Subtração
*: Multiplicação
/: Divisão
%: Módulo (resto da divisão)

Exemplos de Cálculos

1. Adição

#include <stdio.h>

int main() {
    int a = 10;
    int b = 20;
    int soma = a + b;

    printf("A soma de %d e %d é %d\n", a, b, soma);

    return 0;
}

2. Subtração

#include <stdio.h>

int main() {
    int a = 20;
    int b = 10;
    int diferenca = a - b;

    printf("A diferença entre %d e %d é %d\n", a, b, diferenca);

    return 0;
}

3. Multiplicação

#include <stdio.h>

int main() {
    int a = 10;
    int b = 5;
    int produto = a * b;

    printf("O produto de %d e %d é %d\n", a, b, produto);

    return 0;
}

4. Divisão

#include <stdio.h>

int main() {
    int a = 20;
    int b = 4;
    int quociente = a / b;

    printf("O quociente de %d dividido por %d é %d\n", a, b, quociente);

    return 0;
}

5. Módulo (Resto da Divisão)

#include <stdio.h>

int main() {
    int a = 20;
    int b = 3;
    int resto = a % b;

    printf("O resto de %d dividido por %d é %d\n", a, b, resto);

    return 0;
}

Cálculos com Números de Ponto Flutuante
Quando você trabalha com números de ponto flutuante, use variáveis do tipo float ou double e o operador de divisão /.
Exemplo com float

#include <stdio.h>

int main() {
    float a = 20.5;
    float b = 4.0;
    float resultado = a / b;

    printf("O resultado de %.2f dividido por %.2f é %.2f\n", a, b, resultado);

    return 0;
}
Exemplo com double

#include <stdio.h>

int main() {
    double a = 20.5;
    double b = 4.0;
    double resultado = a / b;

    printf("O resultado de %.2lf dividido por %.2lf é %.2lf\n", a, b, resultado);

    return 0;
}

Ordem das Operações
C segue a ordem padrão das operações matemáticas (PEMDAS/BODMAS):
Parênteses ()
Exponenciação (não há um operador padrão para exponenciação em C, mas você pode usar a função pow da biblioteca math.h)
Multiplicação * e Divisão /
Adição + e Subtração -

Exemplo com Múltiplas Operações

#include <stdio.h>

int main() {
    int a = 10;
    int b = 20;
    int c = 5;
    int resultado = (a + b) * c;

    printf("O resultado de (%d + %d) * %d é %d\n", a, b, c, resultado);

    return 0;
}

Funções Matemáticas
Para cálculos mais complexos, você pode usar funções matemáticas da biblioteca math.h. Por exemplo:
pow(x, y): Calcula x 
y
 
sqrt(x): Calcula a raiz quadrada de x
sin(x), cos(x), tan(x): Funções trigonométricas

Exemplo com Funções Matemáticas

#include <stdio.h>
#include <math.h>

int main() {
    double base = 2.0;
    double expoente = 3.0;
    double resultado = pow(base, expoente);

    printf("O resultado de %.2lf elevado a %.2lf é %.2lf\n", base, expoente, resultado);

    return 0;
}

Conclusão
Realizar cálculos em C é simples e direto. Você pode usar operadores aritméticos para operações básicas e funções matemáticas para cálculos mais complexos.
 Lembre-se de seguir a ordem das operações e de usar tipos de dados apropriados para suas variáveis.