

                                    Comando if em C



O comando if em C é usado para executar um bloco de código apenas se uma condição específica for verdadeira.
 É uma das estruturas de controle de fluxo mais básicas e úteis em qualquer linguagem de programação.
Sintaxe do if

A sintaxe do comando if em C é a seguinte:

if (condição) {
    // Bloco de código a ser executado se a condição for verdadeira
}

Componentes
if: Palavra-chave que inicia a estrutura de controle.
condição: Uma expressão que é avaliada como verdadeira (true) ou falsa (false). Se a condição for verdadeira, 
o bloco de código dentro das chaves {} será executado.
Bloco de código: O código que será executado se a condição for verdadeira. Pode conter uma ou mais instruções.

Exemplo Básico
Vamos criar um exemplo simples que verifica se um número é positivo:

#include <stdio.h>

int main() {
    int numero;

    printf("Digite um número: ");
    scanf("%d", &numero);

    if (numero > 0) {
        printf("O número %d é positivo.\n", numero);
    }

    return 0;
}

Saída
Se o usuário digitar 5, a saída será:

Digite um número: 5
O número 5 é positivo.

Se o usuário digitar -3, não haverá saída adicional, pois a condição numero > 0 não será verdadeira.
Condições Compostas

Você pode usar operadores lógicos para criar condições compostas:

&& (AND): Ambas as condições devem ser verdadeiras.
|| (OR): Pelo menos uma das condições deve ser verdadeira.
! (NOT): Inverte o valor da condição.

Exemplo com Condições Compostas
Vamos criar um exemplo que verifica se um número está entre 1 e 10:

#include <stdio.h>

int main() {
    int numero;

    printf("Digite um número: ");
    scanf("%d", &numero);

    if (numero >= 1 && numero <= 10) {
        printf("O número %d está entre 1 e 10.\n", numero);
    }

    return 0;
}

Saída
Se o usuário digitar 7, a saída será:

Digite um número: 7
O número 7 está entre 1 e 10.

Se o usuário digitar 15, não haverá saída adicional, pois a condição numero >= 1 && numero <= 10 não será verdadeira.

if com else
Você também pode usar o comando else para executar um bloco de código se a condição do if for falsa:

if (condição) {
    // Bloco de código a ser executado se a condição for verdadeira
} else {
    // Bloco de código a ser executado se a condição for falsa
}

Exemplo com else
Vamos criar um exemplo que verifica se um número é positivo ou não:

#include <stdio.h>

int main() {
    int numero;

    printf("Digite um número: ");
    scanf("%d", &numero);

    if (numero > 0) {
        printf("O número %d é positivo.\n", numero);
    } else {
        printf("O número %d não é positivo.\n", numero);
    }

    return 0;
}

Saída
Se o usuário digitar 5, a saída será:


Digite um número: 5
O número 5 é positivo.

Se o usuário digitar -3, a saída será:
Digite um número: -3

O número -3 não é positivo.

if com else if
Você pode usar else if para verificar múltiplas condições:

if (condição1) {
    // Bloco de código a ser executado se condição1 for verdadeira
} else if (condição2) {
    // Bloco de código a ser executado se condição2 for verdadeira
} else {
    // Bloco de código a ser executado se nenhuma condição for verdadeira
}

Exemplo com else if
Vamos criar um exemplo que verifica se um número é positivo, negativo ou zero:

#include <stdio.h>

int main() {
    int numero;

    printf("Digite um número: ");
    scanf("%d", &numero);

    if (numero > 0) {
        printf("O número %d é positivo.\n", numero);
    } else if (numero < 0) {
        printf("O número %d é negativo.\n", numero);
    } else {
        printf("O número é zero.\n");
    }

    return 0;
}

Saída
Se o usuário digitar 5, a saída será:

Digite um número: 5
O número 5 é positivo.

Se o usuário digitar -3, a saída será:

Digite um número: -3
O número -3 é negativo.

Se o usuário digitar 0, a saída será:

Digite um número: 0
O número é zero.

Conclusão
O comando if em C permite que você execute código condicionalmente, baseado em uma condição.
 Você pode usar else para lidar com o caso onde a condição é falsa e else if para verificar múltiplas condições. 
 Isso torna o if uma ferramenta poderosa para controlar o fluxo de seu programa.



 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


                            SWITCH-CASE


                O comando switch-case em C é uma estrutura de controle de fluxo que permite executar diferentes blocos de código
 com base no valor de uma variável. É especialmente útil quando você precisa verificar o valor de uma variável contra várias opções.
Sintaxe do switch-case

A sintaxe do switch-case em C é a seguinte:

switch (expressão) {
    case valor1:
        // Bloco de código a ser executado se expressão == valor1
        break;
    case valor2:
        // Bloco de código a ser executado se expressão == valor2
        break;
    // Mais cases podem ser adicionados
    default:
        // Bloco de código a ser executado se nenhum case for verdadeiro
}

Componentes

switch: Palavra-chave que inicia a estrutura de controle.

expressão: Uma expressão que é avaliada e comparada com os valores dos case.

case valor:: Especifica um valor a ser comparado com a expressão. Se a expressão for igual ao valor,
 o bloco de código correspondente será executado.

break: Termina a execução do switch após executar o bloco de código de um case. Sem break,
 o código continuará executando os blocos subsequentes.

default: Bloco de código a ser executado se nenhum dos valores dos case for igual à expressão. O default é opcional.

Exemplo Básico

Vamos criar um exemplo que verifica o dia da semana com base em um número de 1 a 7:

#include <stdio.h>

int main() {
    int dia;

    printf("Digite um número de 1 a 7: ");
    scanf("%d", &dia);

    switch (dia) {
        case 1:
            printf("Domingo\n");
            break;
        case 2:
            printf("Segunda-feira\n");
            break;
        case 3:
            printf("Terça-feira\n");
            break;
        case 4:
            printf("Quarta-feira\n");
            break;
        case 5:
            printf("Quinta-feira\n");
            break;
        case 6:
            printf("Sexta-feira\n");
            break;
        case 7:
            printf("Sábado\n");
            break;
        default:
            printf("Número inválido\n");
    }

    return 0;
}

Saída

Se o usuário digitar 3, a saída será:
Digite um número de 1 a 7: 3

Terça-feira
Se o usuário digitar 9, a saída será:

Digite um número de 1 a 7: 9
Número inválido


Exemplo com Múltiplos case

Você pode agrupar múltiplos case para executar o mesmo bloco de código para diferentes valores:


#include <stdio.h>

int main() {
    int nota;

    printf("Digite uma nota de 0 a 10: ");
    scanf("%d", &nota);

    switch (nota) {
        case 9:
        case 10:
            printf("Aprovado com Distinção\n");
            break;
        case 7:
        case 8:
            printf("Aprovado\n");
            break;
        case 5:
        case 6:
            printf("Recuperação\n");
            break;
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
            printf("Reprovado\n");
            break;
        default:
            printf("Nota inválida\n");
    }

    return 0;
}

Saída

Se o usuário digitar 8, a saída será:

Digite uma nota de 0 a 10: 8
Aprovado

Se o usuário digitar 11, a saída será:
Digite uma nota de 0 a 10: 11
Nota inválida


Importância do break
O break é crucial para evitar a execução de múltiplos blocos de código. Sem break,
 o código continuará executando os blocos subsequentes, o que pode levar a resultados inesperados.

Conclusão
O comando switch-case em C é uma maneira eficiente de executar blocos de código com base
 no valor de uma variável. Ele é especialmente útil quando você precisa verificar uma variável contra várias opções. Lembre-se de usar break para evitar a execução
 de múltiplos blocos e de incluir um default para lidar com casos não previstos.




 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


                                                    while


O comando while em C é uma estrutura de controle de fluxo usada para repetir um bloco de código enquanto uma condição
 específica for verdadeira. É uma das formas de implementar loops em C.

Sintaxe do while
A sintaxe do comando while é a seguinte:

while (condição) {
    // Bloco de código a ser executado enquanto a condição for verdadeira
}

Componentes

while: Palavra-chave que inicia a estrutura de controle.
condição: Uma expressão que é avaliada antes de cada iteração do loop. Se a condição for verdadeira (true),
 o bloco de código dentro das chaves {} será executado. Se a condição for falsa (false), o loop será interrompido
  e o programa continuará a execução após o bloco while.
Bloco de código: O código que será executado repetidamente enquanto a condição for verdadeira.

Exemplo Básico
Vamos criar um exemplo que imprime os números de 1 a 5 usando um loop while:

#include <stdio.h>

int main() {
    int contador = 1; // Inicializa o contador

    while (contador <= 5) { // Condição: enquanto contador for menor ou igual a 5
        printf("%d\n", contador); // Imprime o valor do contador
        contador++; // Incrementa o contador
    }

    return 0;
}

Saída

1
2
3
4
5


Exemplo com Condição de Parada
Vamos criar um exemplo que solicita ao usuário números até que ele digite um número negativo:

#include <stdio.h>

int main() {
    int numero;

    printf("Digite números positivos (digite um número negativo para sair):\n");

    while (1) { // Loop infinito
        scanf("%d", &numero); // Lê um número do usuário

        if (numero < 0) { // Condição de parada
            printf("Número negativo digitado. Saindo do loop.\n");
            break; // Sai do loop
        }

        printf("Número digitado: %d\n", numero);
    }

    return 0;
}

Saída

Digite números positivos (digite um número negativo para sair):
10
Número digitado: 10
20
Número digitado: 20
-1
Número negativo digitado. Saindo do loop.


Loop Infinito com while
Você pode criar um loop infinito usando while (1) ou while (true).
 Isso é útil quando você precisa de um loop que só será interrompido por uma condição específica dentro do bloco de código.

Exemplo de Loop Infinito

#include <stdio.h>

int main() {
    int numero;

    printf("Digite números positivos (digite um número negativo para sair):\n");

    while (1) { // Loop infinito
        scanf("%d", &numero);

        if (numero < 0) {
            printf("Número negativo digitado. Saindo do loop.\n");
            break; // Sai do loop
        }

        printf("Número digitado: %d\n", numero);
    }

    return 0;
}

Conclusão
O comando while em C permite que você repita um bloco de código enquanto uma condição for verdadeira.
 É útil para situações onde você não sabe de antemão quantas vezes o loop deve ser executado. Lembre-se de incluir uma
 condição de parada para evitar loops infinitos, a menos que isso seja intencional.


xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx



                                        do-while



Em C, o laço de repetição do-while é uma estrutura de controle que permite executar um bloco de código pelo menos uma vez e,
 em seguida, repeti-lo enquanto uma condição específica for verdadeira. A sintaxe básica do do-while é a seguinte:

do {
    // Bloco de código a ser executado
} while (condição);


Aqui está um exemplo simples para ilustrar como funciona o do-while:

#include <stdio.h>

int main() {
    int numero = 0;

    do {
        printf("Digite um número maior que 0: ");
        scanf("%d", &numero);

        if (numero <= 0) {
            printf("Número inválido. Tente novamente.\n");
        }
    } while (numero <= 0);

    printf("Número válido digitado: %d\n", numero);

    return 0;
}

Neste exemplo:
O bloco de código dentro do do é executado pelo menos uma vez.

Em seguida, a condição numero <= 0 é verificada.

Se a condição for verdadeira, o bloco de código dentro do do é executado novamente.

Isso continua até que a condição se torne falsa (ou seja, numero > 0).

O do-while é útil quando você deseja garantir que o bloco de código seja executado pelo menos uma vez,
 independentemente da condição inicial.

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


                                    COMANDO FOR 


Comando FOR similar ao while 

#inicialização, condição e atualização

Diferença crucial:

#Sintaxe mais complexa
#Tudo fica  embutido no comando

No C, o comando for é uma estrutura de controle de repetição que permite executar um bloco de código
 repetidamente enquanto uma condição específica for verdadeira. A sintaxe geral do for em C é a seguinte:

for (inicialização; condição; incremento) {
    // Bloco de código a ser executado
}

Componentes do for

Inicialização: Executada uma vez no início do loop. Normalmente, é usada para inicializar uma variável de controle.

Condição: Verificada antes de cada iteração. Se a condição for verdadeira, o bloco de código é executado. Se for falsa, o loop termina.

Incremento: Executada após cada iteração do bloco de código. Normalmente, é usada para atualizar a variável de controle.

Exemplo Básico
Aqui está um exemplo simples que imprime os números de 1 a 5:

#include <stdio.h>

int main() {
    for (int i = 1; i <= 5; i++) {
        printf("%d\n", i);
    }
    return 0;
}

Explicação

Inicialização: int i = 1 - Inicializa a variável i com o valor 1.
Condição: i <= 5 - Verifica se i é menor ou igual a 5.
Incremento: i++ - Incrementa i em 1 após cada iteração.

Outros Exemplos
Exemplo 1: Imprimir números pares de 0 a 10


#include <stdio.h>

int main() {
    for (int i = 0; i <= 10; i += 2) {
        printf("%d\n", i);
    }
    return 0;
}

Exemplo 2: Contagem regressiva de 10 a 1

#include <stdio.h>

int main() {
    for (int i = 10; i >= 1; i--) {
        printf("%d\n", i);
    }
    return 0;
}

Exemplo 3: Usando for para iterar em um array

#include <stdio.h>

int main() {
    int numbers[] = {10, 20, 30, 40, 50};
    int size = sizeof(numbers) / sizeof(numbers[0]);

    for (int i = 0; i < size; i++) {
        printf("Elemento %d: %d\n", i, numbers[i]);
    }

    return 0;
}

Observações
Variável de Controle: A variável de controle (i no exemplo) é tipicamente declarada dentro do for. No entanto, em versões mais antigas do C (antes do C99), a variável de controle deve ser declarada fora do for:

int i;
for (i = 0; i < 5; i++) {
    printf("%d\n", i);
}

Condição Opcional: A condição pode ser omitida, mas isso resulta em um loop infinito. Por exemplo:

for (int i = 0; ; i++) {
    printf("%d\n", i);
    if (i >= 5) break; // Para o loop após 5 iterações
}

Incremento Opcional: O incremento também pode ser omitido, mas você precisa atualizar a variável de controle dentro do bloco de código para evitar um loop infinito:

for (int i = 0; i < 5; ) {
    printf("%d\n", i);
    i++; // Incremento manual
}

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


                                   Controle de Fluxo break e continue em C




Em C, os comandos de controle de fluxo break e continue são usados para controlar o fluxo de loops (for, while, do-while) e,
 no caso do break, também pode ser usado para sair de um switch statement. Vou explicar cada um deles com exemplos.

1. Comando break
O comando break é usado para sair imediatamente de um loop ou de um switch statement. Quando break é executado,
 o controle do programa é transferido para a primeira instrução fora do loop ou switch.

Exemplo com for

#include <stdio.h>

int main() {
    for (int i = 0; i < 10; i++) {
        if (i == 5) {
            break; // Sai do loop quando i for igual a 5
        }
        printf("%d\n", i);
    }
    printf("Loop terminado.\n");
    return 0;
}

Saída:

0
1
2
3
4
Loop terminado.

Exemplo com while

#include <stdio.h>

int main() {
    int i = 0;
    while (i < 10) {
        if (i == 5) {
            break; // Sai do loop quando i for igual a 5
        }
        printf("%d\n", i);
        i++;
    }
    printf("Loop terminado.\n");
    return 0;
}

Saída:

0
1
2
3
4
Loop terminado.

Exemplo com switch

#include <stdio.h>

int main() {
    int num = 3;
    switch (num) {
        case 1:
            printf("Número é 1\n");
            break;
        case 2:
            printf("Número é 2\n");
            break;
        case 3:
            printf("Número é 3\n");
            break;
        default:
            printf("Número desconhecido\n");
    }
    printf("Fora do switch.\n");
    return 0;
}

Saída:

Número é 3

Fora do switch.

2. Comando continue

O comando continue é usado para pular a iteração atual de um loop e continuar com
 a próxima iteração. Quando continue é executado, o controle do programa é transferido para o início do loop,
  onde a condição é reavaliada.

Exemplo com for

#include <stdio.h>

int main() {
    for (int i = 0; i < 10; i++) {
        if (i % 2 == 0) {
            continue; // Pula a iteração quando i é par
        }
        printf("%d\n", i);
    }
    printf("Loop terminado.\n");
    return 0;
}

Saída:

1
3
5
7
9
Loop terminado.

Exemplo com while

#include <stdio.h>

int main() {
    int i = 0;
    while (i < 10) {
        i++;
        if (i % 2 == 0) {
            continue; // Pula a iteração quando i é par
        }
        printf("%d\n", i);
    }
    printf("Loop terminado.\n");
    return 0;
}

Saída:

1
3
5
7
9
Loop terminado.

Observações Importantes

Usar com Cuidado: Ambos os comandos podem tornar o código mais complexo se usados em excesso.
 Use-os apenas quando necessário para melhorar a legibilidade e a eficiência do código.

Estrutura de Controle: break e continue só podem ser usados dentro de loops (for, while, do-while)
 e switch statements. Usá-los fora dessas estruturas resultará em erro de compilação.